# ###############################################
# import dynsmall
# ###############################################

dispmat matlab
# ----------------------------------------------------
# 1. BASIC DYNAMIC-SMALL     ------------------------
# ----------------------------------------------------
echo Creating the small dynamic
new DynamicHrp2 dyn
new DynamicHrp2 dyn2
import dynfilessmall
dyn2.parse
new VectorConstant zero
zero.resize 36
plug zero.out dyn2.position
plug zero.out dyn2.velocity
plug zero.out dyn2.acceleration

# Free-flyer
new VectorConstant dyn2ffposzero
dyn2ffposzero.resize 6
dyn2ffposzero.[] 0 0.0
dyn2ffposzero.[] 1 0.0
dyn2ffposzero.[] 2 0.0
dyn2ffposzero.[] 3 0.0
dyn2ffposzero.[] 4 0.0
dyn2ffposzero.[] 5 0.0

plug dyn2ffposzero.out dyn2.ffposition

# Create various operational points
dyn2.createOpPoint 0 22
dyn2.createOpPoint lh 29
dyn2.createOpPoint rleg 6
dyn2.createOpPoint lleg 12
dyn2.createOpPoint chest 14

dyn2.setProperty ComputeVelocity               false
dyn2.setProperty ComputeCoM                    false
dyn2.setProperty ComputeAccelerationCoM        false
dyn2.setProperty ComputeMomentum               false
dyn2.setProperty ComputeZMP                    false
dyn2.setProperty ComputeBackwardDynamics       false

# Motor specific variables
set dyn.gearRatio [36](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,207.69,381.54,0,0,219.23,231.25,266.67,250.0,145.45,350.0,0,0,0,0,0,0,0,0)
set dyn.inertiaRotor [36](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69.6e-7,69.6e-7,0,0,69.6e-7,66.0e-7,10.0e-7,66.0e-7,11.0e-7,10.0e-7,0,0,0,0,0,0,0,0)

# ----------------------------------------------------
# 2. FLEX -------------------------------------------
# ----------------------------------------------------
# ------- Flex based kinematics
new AngleEstimator flex
flex.fromSensor false
plug dyn2.lleg flex.contactEmbeddedPosition
plug dyn2.chest flex.sensorEmbeddedPosition

new RPYToMatrix attitudeSensor
# plug attitudeSensor.out flex.sensorWorldRotation
plug flex.waistWorldPoseRPY dyn.ffposition

# --- Flexibility velocity
new Derivator<Vector> flexV
plug flex.angles flexV.in

# --- PosFF from leg contact + sensor # DEPRECIATED
new WaistPoseFromSensorAndContact posKF
plug dyn2.lleg posKF.contact
plug dyn2.chest posKF.position
posKF.fromSensor true

# --- DYN With true posFF
dyn.parse
plug zero.out dyn.velocity
plug zero.out dyn.acceleration
# plug posKF.positionWaist dyn.ffposition
plug flex.waistWorldPoseRPY dyn.ffposition

new SOT sot
set sot.damping 1e-6
sot.nbJoints 36
dyn.createOpPoint Waist 0
dyn.createOpPoint 0 22
dyn.createOpPoint rleg 6
dyn.createOpPoint lleg 12


# --- COM
dyn.setComputeCom 1
# dyn.setProperty ComputeVelocity true
# dyn.setProperty ComputeMomentum true
# dyn.setProperty ComputeZMP true

new FeatureGeneric featureCom
plug dyn.com featureCom.errorIN
plug dyn.Jcom featureCom.jacobianIN
# set featureCom.selec 111

new FeatureGeneric featureComDes
# set featureComDes.errorIN [2](0,-0)
set featureCom.sdes featureComDes

new Task taskCom
taskCom.add featureCom
set taskCom.controlGain .3
# set taskCom.controlGain 1


# --- TWOFEET
new FeaturePoint6dRelative featureTwofeet
plug dyn.Jrleg  featureTwofeet.Jq
plug dyn.Jlleg  featureTwofeet.JqRef
plug dyn.rleg  featureTwofeet.position
plug dyn.lleg  featureTwofeet.positionRef
# set featureTwofeet.error [6](0,0,0,0,0,0)

new Task taskTwofeet
taskTwofeet.add featureTwofeet
set taskTwofeet.controlGain 0


# --- CONTACT CONSTRAINT
new Constraint legs
legs.add dyn.Jlleg



# ----------------------------------------------------
# 6. Hook up HRP          ----------------------------
# ----------------------------------------------------
plug sot.control OpenHRP.control
plug OpenHRP.state dyn.position
plug OpenHRP.state dyn2.position
plug OpenHRP.attitude posKF.attitudeIN
plug OpenHRP.attitude flex.sensorWorldRotation

import traces
plug sot.control OpenHRP.control

import small
# import force

# ###############################################
# import forceL
# ###############################################
dyn.createOpPoint lh 29


# import grip
# import teleoperation/teleop

# ###############################################
# import hwpgpginitpart1
# ###############################################

loadPlugin pg${DYN_LIB_EXT}
new PatternGenerator pg

# Initialize files and information of the pattern generator.
pg.setVrmlDir ${HRP2_MODEL_DIRECTORY}/
pg.setVrml HRP2JRLmainsmall.wrl
pg.setXmlSpec ${HRP2_CONFIG_DIRECTORY}/HRP2SpecificitiesSmall.xml
pg.setXmlRank ${HRP2_CONFIG_DIRECTORY}/HRP2LinkJointRankSmall.xml

# ###############################################
# import hwpgpginitpart2
# ###############################################

# Build internal object
pg.buildModel

# Standard initialization
pg.parsecmd :samplingperiod 0.005
pg.parsecmd :previewcontroltime 1.6
pg.parsecmd :comheight 0.814
pg.parsecmd :omega 0.0
pg.parsecmd :stepheight 0.05
pg.parsecmd :singlesupporttime 0.780
pg.parsecmd :doublesupporttime 0.020
pg.parsecmd :armparameters 0.5
pg.parsecmd :LimitsFeasibility 0.0
pg.parsecmd :ZMPShiftParameters 0.015 0.015 0.015 0.015
pg.parsecmd :TimeDistributeParameters 2.0 3.5 1.0 3.0
pg.parsecmd :UpperBodyMotionParameters 0.0 -0.5 0.0
pg.parsecmd :comheight 0.814
pg.parsecmd :SetAlgoForZmpTrajectory Morisawa

# Plug OpenHRP in the pg to get the current state of the robot.
plug OpenHRP.state pg.position
# plug OpenHRP.motorcontrol pg.motorcontrol
plug OpenHRP.previousState pg.motorcontrol
plug OpenHRP.zmppreviouscontroller pg.zmppreviouscontroller
plug dyn.com pg.com

# ###############################################
# import hwpginitframes
# ###############################################
# Olivier Stasse
# 2009-02
#
debugtrace true
# ------------------------------------------------------------
# Modify the origin to ensure continuity with and w/ the walk.
# ------------------------------------------------------------
new Inverse<matrixhomo> lfo_H_pg
plug pg.initleftfootref lfo_H_pg.in
compute lfo_H_pg.out
freeze lfo_H_pg.in


# ---- Previous Version : Based on the
# ---- waist position reference.
# new Compose<RPY+T> pg_H_wa
# plug pg.waistpositionabsolute pg_H_wa.in2
# plug pg.waistattitudeabsolute pg_H_wa.in1

# ---- New Version : Based on the
# ---- support foot position reference.

new Selector SupportFootSelec
SupportFootSelec.reset 2 2

SupportFootSelec.create matrixHomo pg_H_sf 0
plug pg.rightfootref SupportFootSelec.pg_H_sf0
plug pg.leftfootref SupportFootSelec.pg_H_sf1

SupportFootSelec.create matrixHomo wa_H_sf 1
plug dyn2.rleg SupportFootSelec.wa_H_sf0
plug dyn2.lleg SupportFootSelec.wa_H_sf1

plug pg.SupportFoot SupportFootSelec.selec

new Inverse<matrixhomo> sf_H_wa
plug SupportFootSelec.wa_H_sf sf_H_wa.in

new Multiply<matrixhomo> pg_H_wa
plug SupportFootSelec.pg_H_sf pg_H_wa.in1
plug sf_H_wa.out pg_H_wa.in2

# --- Common part for specifying free flyer.

new Multiply<matrixhomo> lfo_H_wa
plug lfo_H_pg.out lfo_H_wa.in1
plug pg_H_wa.out lfo_H_wa.in2

new MatrixHomoToPoseRollPitchYaw ffpos_from_pg
plug lfo_H_wa.out ffpos_from_pg.in

# --- Pass the dyn from ref left_foot to ref pg.
plug ffpos_from_pg.out dyn.ffposition

# --- Extract pose and attitude from ffpos

new Selec<vector> ffattitude_from_pg
plug ffpos_from_pg.out ffattitude_from_pg.in
ffattitude_from_pg.selec 3 6

new Selec<vector> ffposition_from_pg
plug ffpos_from_pg.out ffposition_from_pg.in
ffposition_from_pg.selec 0 3


# --- Now compute the ZMP ref in the Waist reference frame.

new Multiply<vector,matrixHomo> lfo_H_zmp
plug pg.zmpref lfo_H_zmp.in1
plug lfo_H_pg.out lfo_H_zmp.in2


new Inverse<matrixhomo> wa_H_lfo
plug lfo_H_wa.out wa_H_lfo.in

new Multiply<vector,matrixHomo> wa_H_zmp
plug lfo_H_zmp.out wa_H_zmp.in1
plug wa_H_lfo.out wa_H_zmp.in2

# --- And reconnect the ZMPref to OpenHRP in the new reference frame.

pg.initState

# Those two lines needs some time
# to make sure the robot takes into account nicely
# the new reference.
plug pg.zmpref OpenHRP.zmp
# plug pg.waistattitude OpenHRP.attitudeIN
plug ffattitude_from_pg.out OpenHRP.attitudeIN
unplug OpenHRP.zmp
pg.parsecmd :SetZMPFrame world
plug wa_H_zmp.out OpenHRP.zmp

# ---
# --- Last init and you can go.


plug lfo_H_wa.out OpenHRP.positionIN

# ###############################################
# import walkreact-new
# ###############################################

loadPlugin step-checker${DYN_LIB_EXT}
loadPlugin step-observer${DYN_LIB_EXT}
loadPlugin step-queue${DYN_LIB_EXT}
loadPlugin step-computer-pos${DYN_LIB_EXT}
loadPlugin step-computer-joystick${DYN_LIB_EXT}
loadPlugin pg-manager${DYN_LIB_EXT}
loadPlugin step-time-line${DYN_LIB_EXT}

new StepObserver stepobs
new StepQueue stepqueue
new StepComputerPos stepcomp
new PGManager steppg
new TimeLine stepper

stepcomp.setObserver stepobs
stepper.setComputer stepcomp
stepper.setPGManager steppg
stepper.setQueue stepqueue

plug dyn.lh stepobs.lefthand
plug dyn.0 stepobs.righthand
plug dyn.lleg stepobs.leftfoot
plug dyn.rleg stepobs.rightfoot
plug dyn.Waist stepobs.waist

plug pg.SupportFoot stepcomp.contactfoot
plug stepobs.position2handLeft stepcomp.posrefleft
plug stepobs.position2handRight stepcomp.posrefright

OpenHRP.periodicCall addSignal stepobs.position2handLeft
OpenHRP.periodicCall addSignal stepobs.position2handRight
compute stepcomp.posrefleft
compute stepcomp.posrefright

stepcomp.thisIsZero record
steppg.initPg pg
OpenHRP.periodicCall addSignal stepper.trigger

# ###############################################
# import walking/hwpgfeettasksrel
# ###############################################

# --- To compute ZMP -------------
# new DynamicHrp2 dyn3
# dyn3.setFiles ${HRP2_MODEL_DIRECTORY}/ HRP2JRLmainsmall.wrl ${HRP2_CONFIG_DIRECTORY}/HRP2Specificities.xml ${HRP2_CONFIG_DIRECTORY}/HRP2LinkJointRankSmall.xml
# dyn3.parse

new Derivator<Vector> qdot
plug dyn.position qdot.in
set qdot.dt 200

new Derivator<Vector> qddot
plug qdot.out qddot.in
set qddot.dt 200

new Derivator<Vector> ffdot
plug dyn.ffposition ffdot.in
set ffdot.dt 200

# plug dyn.position dyn3.position
# plug qdot.out dyn3.velocity
# plug qddot.out dyn3.acceleration
# plug dyn.ffposition dyn3.ffposition
# plug ffdot.out dyn3.ffvelocity

# --------------------------------

# ---- WAIST TASK ----
new FeaturePoint6d WaistFeature
new FeaturePoint6d WaistFeatureDesired

plug dyn.Waist WaistFeature.position
plug dyn.JWaist WaistFeature.Jq

set WaistFeature.sdes WaistFeatureDesired

new VectorConstant vectorCom
vectorCom.resize 3
vectorCom.[] 0 0.0
vectorCom.[] 1 0.0
vectorCom.[] 2 0.0

new Multiply<vector> comfiltered
plug vectorCom.out comfiltered.in1
plug pg.comref comfiltered.in2

new Add<vector> WaistPCom
plug pg.initwaistposref WaistPCom.in1
plug comfiltered.out WaistPCom.in2

new Stack<vector> WaistPose
plug WaistPCom.out WaistPose.in1
plug pg.initwaistattref WaistPose.in2
WaistPose.selec1 0 3
WaistPose.selec2 0 3

new PoseRollPitchYawToMatrixHomo MHWaistPose
plug WaistPose.out MHWaistPose.in
plug MHWaistPose.out WaistFeatureDesired.position

new Task taskWaist
taskWaist.add WaistFeature

set WaistFeature.selec 011100
set taskWaist.controlGain 5

# --- ANGULAR MOMENTUM TASK ---
# new FeatureGeneric featureAngularMomentum
# featureAngularMomentum.dimDefault 3
# plug dyn3.angularmomentum featureAngularMomentum.errorIN
# plug dyn3.Jangularmomentum featureAngularMomentum.jacobianIN
# set featureAngularMomentum.selec 011

# new Task taskAngularMomentum
# taskAngularMomentum.add featureAngularMomentum
# set taskAngularMomentum.controlGain -20

# --- COM REF ---

new Multiply<vector,matrixHomo> pg_comref
plug pg.comref pg_comref.in1
plug lfo_H_pg.out pg_comref.in2

# --- Selector of Com Ref and Foot Ref ---
new Selector PGselec
PGselec.reset 2 1
PGselec.create vector scomref 0

# Dyn by default
plug dyn.com PGselec.scomref0
plug pg_comref.out PGselec.scomref1

# Plug the left leg.

new Multiply<matrixhomo> pg_leftfootref
plug pg.leftfootref pg_leftfootref.in1
plug lfo_H_pg.out pg_leftfootref.in2

# Plug the right leg.
new Multiply<matrixhomo> pg_rightfootref
plug pg.rightfootref pg_rightfootref.in1
plug lfo_H_pg.out pg_rightfootref.in2

# when the PG is processing.
plug pg.inprocess PGselec.selec

# Send the reference command to the task.
plug PGselec.scomref featureComDes.errorIN

set featureComDes.selec 011
set featureCom.selec 011

set taskCom.controlGain 1

# --- Handling the two feet ---

# switch between the two ref
# depending on who is in contact with the floor.

new Selector RefFeetRelselec
RefFeetRelselec.reset 2 6

RefFeetRelselec.create matrixHomo DesFoot 0
plug pg_rightfootref.out RefFeetRelselec.DesFoot0
plug pg_leftfootref.out RefFeetRelselec.DesFoot1

RefFeetRelselec.create matrixHomo DesRefFoot 1
plug pg_leftfootref.out RefFeetRelselec.DesRefFoot0
plug pg_rightfootref.out RefFeetRelselec.DesRefFoot1

RefFeetRelselec.create matrixHomo Foot 2
plug dyn.rleg RefFeetRelselec.Foot0
plug dyn.lleg RefFeetRelselec.Foot1

RefFeetRelselec.create matrixHomo RefFoot 3
plug dyn.lleg RefFeetRelselec.RefFoot0
plug dyn.rleg RefFeetRelselec.RefFoot1

RefFeetRelselec.create matrix JFoot 4
plug dyn.Jrleg RefFeetRelselec.JFoot0
plug dyn.Jlleg RefFeetRelselec.JFoot1

RefFeetRelselec.create matrix JRefFoot 5
plug dyn.Jlleg RefFeetRelselec.JRefFoot0
plug dyn.Jrleg RefFeetRelselec.JRefFoot1

plug pg.SupportFoot RefFeetRelselec.selec
# set RefFeetRelselec.selec 0

new FeaturePoint6dRelative featureTwofeetDes
featureTwofeet.initSdes featureTwofeetDes
set featureTwofeet.sdes featureTwofeetDes

# unplug featureTwofeet.position
# unplug featureTwofeet.positionRef
# unplug featureTwofeetDes.position
# unplug featureTwofeetDes.positionRef

plug RefFeetRelselec.Foot featureTwofeet.position
plug RefFeetRelselec.RefFoot featureTwofeet.positionRef
plug RefFeetRelselec.JFoot featureTwofeet.Jq
plug RefFeetRelselec.JRefFoot featureTwofeet.JqRef
plug RefFeetRelselec.DesFoot featureTwofeetDes.position
plug RefFeetRelselec.DesRefFoot featureTwofeetDes.positionRef

# --- Creating PD tasks ---
new TaskPD taskTwofeetPD
taskTwofeetPD.add featureTwofeet

plug pg.dotrightfootref featureTwofeetDes.dotposition
plug pg.dotleftfootref featureTwofeetDes.dotpositionRef
plug featureTwofeetDes.errordot taskTwofeetPD.errorDot

new TaskPD taskComPD
taskComPD.add featureCom
plug pg.dcomref featureComDes.errordotIN
plug featureCom.errordot taskComPD.errorDot

# --- Creating task for the waist

# --- Adaptative Gain ---
# new GainAdaptive gainAdapCom
# gainAdapCom.set 5 .5 50
# plug gainAdapCom.gain taskCom.controlGain
# plug taskCom.error gainAdapCom.error

# new GainAdaptive gainAdapTwofeet
# gainAdapTwofeet.set 5 .5 100
# plug gainAdapTwofeet.gain taskTwofeet.controlGain
# plug taskTwofeet.error gainAdapTwofeet.error
set taskCom.controlGain 40

set taskComPD.controlGain 40
taskComPD.beta -1

# Good in kinematics - Bad in dynamics
# set taskTwofeet.controlGain 200
set taskTwofeet.controlGain 200

# set taskTwofeetPD.controlGain 1

# --- Error dot computation --

# --- SOT ---
set sot.damping 0.05
sot.clear

# Handling constraints
sot.clearConstraint

legs.clear
legs.add RefFeetRelselec.JFoot
sot.addConstraint legs

# -- SOT: PUSHING THE TASKS

# -- CoM
sot.push taskComPD

# -- Legs
sot.push taskTwofeet

# -- Waist
sot.push taskWaist

# --- TRACE ---

OpenHRP.periodicCall addSignal pg_comref.out
OpenHRP.periodicCall addSignal dyn.com
OpenHRP.periodicCall addSignal taskCom.error
OpenHRP.periodicCall addSignal pg.dcomref
# OpenHRP.periodicCall addSignal dyn2.momenta

tr.add taskCom.error errorcom
tr.add taskCom.task taskcom
tr.add dyn.com com
tr.add pg_comref.out comref
tr.add taskCom.controlGain gaincom
tr.add pg.comref comref0
tr.add pg.zmpref zmpref
tr.add OpenHRP.zmp ohzmpref
tr.add lfo_H_wa.out lfoHwa
tr.add lfo_H_zmp.out lfoHzmp
tr.add lfo_H_pg.out lfoHpg
tr.add pg_H_wa.out pgHwa
tr.add WaistPose.out waistpose

tr.add SupportFootSelec.pg_H_sf pg_H_sf
tr.add sf_H_wa.out sf_H_wa

tr.add pg.dcomref dcomref
tr.add featureCom.errordot comerrordot

tr.add taskTwofeet.error errortwofeet
tr.add taskTwofeetPD.error errortwofeetPD
# tr.add taskWaist.error errorwaist

tr.add RefFeetRelselec.Foot pgsfoot
tr.add RefFeetRelselec.RefFoot pgsreffoot
tr.add RefFeetRelselec.DesFoot pgsdesfoot
tr.add RefFeetRelselec.DesRefFoot pgsdesreffoot

OpenHRP.periodicCall addSignal pg.initleftfootref
OpenHRP.periodicCall addSignal pg.initrightfootref
tr.add pg.leftfootref pgleftfootref
tr.add pg.rightfootref pgrightfootref
tr.add pg.initleftfootref pginitleftfootref
tr.add pg.initrightfootref pginitrightfootref

tr.add dyn.lleg dynleftfoot
tr.add dyn.rleg dynrightfoot
tr.add dyn2.lleg dyn2leftfoot
tr.add dyn2.rleg dyn2rightfoot

# OpenHRP.periodicCall addSignal dyn3.angularmomentum
# tr.add dyn3.angularmomentum angularmomentum

# dyn3.setProperty ComputeZMP true
# tr.add dyn.momenta dynmomenta

# OpenHRP.periodicCall addSignal dyn2.ffposition

# tr.add dyn3.zmp dyn3zmp
# OpenHRP.periodicCall addSignal dyn.momenta

tr.add dyn.ffposition dynffposition
tr.add dyn2.ffposition dyn2ffposition
tr.add pg.SupportFoot supportfoot
tr.add ffattitude_from_pg.out ffattitude_from_pg
# tr.add featureHeadWPG.position headwpgpos
# tr.add featureHeadWPGDes.position headwpgposdes

tr.start

# stepper.state start

# --- DEBUG ---
# plug controlsmall.out OpenHRP.control
# set taskCom.controlGain 1

# plug flex.waistWorldPoseRPY dyn.ffposition

# set taskCom.controlGain 15
# set taskCom.controlGain 100

# new GainHyperbolic gainComH
# gainComH.set 15 1 8e3 .02
# plug taskCom.error gainComH.error
# plug gainComH.gain taskCom.controlGain

# set taskCom.controlGain 15

# ---
# tr.add dyn.ffposition
# stepper.state start


new CoMFreezer freezercom
plug pg.inprocess freezercom.PGInProcess
plug dyn.com freezercom.CoMRef
plug freezercom.freezedCoM PGselec.scomref0

OpenHRP.periodicCall addSignal freezercom.freezedCoM

